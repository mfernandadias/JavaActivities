As cole√ß√µes em Java compartilham v√°rios m√©todos
List, Set, Map, Queue
Possui m√©todos espec√≠ficos. Abaixo est√£o os principais m√©todos organizados
por tipo, com explica√ß√£o claras e exemplos

1. M√âTODOS COMUNS A List, Set, Queue (interface Collection)
Esses m√©todos est√£o na interface Collection<E> e funcionam em ArrayList, HashSet,
LinkedList, ect
| M√©todo               | O que faz                                    | Exemplo                           |
| -------------------- | -------------------------------------------- | --------------------------------- |
| `add(E e)`           | Adiciona um elemento                         | `lista.add("Jo√£o");`              |
| `remove(Object o)`   | Remove o elemento especificado               | `set.remove(10);`                 |
| `contains(Object o)` | Verifica se cont√©m o elemento                | `lista.contains("Maria");`        |
| `isEmpty()`          | Verifica se est√° vazia                       | `set.isEmpty();`                  |
| `size()`             | Retorna a quantidade de elementos            | `fila.size();`                    |
| `clear()`            | Remove todos os elementos                    | `lista.clear();`                  |
| `iterator()`         | Retorna um iterator para percorrer a cole√ß√£o | `Iterator it = lista.iterator();` |

 2. M√âTODOS EXCLUSIVOS DE List
 Listas (como ArrayList e LinkedList) t√™m √≠ndices:
 | M√©todo                  | O que faz                             | Exemplo                        |
 | ----------------------- | ------------------------------------- | ------------------------------ |
 | `get(int index)`        | Retorna o elemento na posi√ß√£o         | `lista.get(0);`                |
 | `set(int index, E e)`   | Substitui o valor em uma posi√ß√£o      | `lista.set(0, "Pedro");`       |
 | `add(int index, E e)`   | Insere elemento em posi√ß√£o espec√≠fica | `lista.add(1, "Maria");`       |
 | `indexOf(Object o)`     | Retorna o √≠ndice da 1¬™ ocorr√™ncia     | `lista.indexOf("Carlos");`     |
 | `lastIndexOf(Object o)` | √öltimo √≠ndice da ocorr√™ncia           | `lista.lastIndexOf("Carlos");` |


 3. M√âTODOS DE Set (como HashSet)
Sets n√£o aceitam duplicatas. Herda da interface Collection
| M√©todo          | O que faz                     | Exemplo             |
| --------------- | ----------------------------- | ------------------- |
| `add(E e)`      | Adiciona se n√£o for duplicado | `set.add(10);`      |
| `remove(E e)`   | Remove elemento               | `set.remove(10);`   |
| `contains(E e)` | Verifica se existe            | `set.contains(10);` |

 4. M√âTODOS DE Map<K, V> (como HashMap)
 Maps trabalham com pares chave-valor:
 | M√©todo                   | O que faz                         | Exemplo                                      |
 | ------------------------ | --------------------------------- | -------------------------------------------- |
 | `put(K key, V value)`    | Associa a chave a um valor        | `map.put("user", "1234");`                   |
 | `get(K key)`             | Retorna o valor associado √† chave | `map.get("user");`                           |
 | `containsKey(K key)`     | Verifica se a chave existe        | `map.containsKey("admin");`                  |
 | `containsValue(V value)` | Verifica se o valor existe        | `map.containsValue("senha");`                |
 | `remove(K key)`          | Remove a chave e seu valor        | `map.remove("admin");`                       |
 | `keySet()`               | Retorna todas as chaves           | `Set<String> chaves = map.keySet();`         |
 | `values()`               | Retorna todos os valores          | `Collection<String> valores = map.values();` |
 | `entrySet()`             | Retorna os pares chave-valor      | `for (Map.Entry e : map.entrySet())`         |

 5. M√âTODOS DE Queue
 Filas funcionam como FIFO (primeiro a entrar, primeiro a sair):
 | M√©todo       | O que faz                              | Exemplo                    |
 | ------------ | -------------------------------------- | -------------------------- |
 | `add(E e)`   | Adiciona no fim da fila                | `fila.add("Cliente 1");`   |
 | `offer(E e)` | Adiciona (n√£o lan√ßa exce√ß√£o se falhar) | `fila.offer("Cliente 2");` |
 | `poll()`     | Remove e retorna o primeiro elemento   | `fila.poll();`             |
 | `peek()`     | Retorna o primeiro sem remover         | `fila.peek();`             |


üéì DICA VISUAL RESUMIDA
| Interface    | M√©todos importantes                                                   |
| ------------ | --------------------------------------------------------------------- |
| `Collection` | `add()`, `remove()`, `contains()`, `size()`, `isEmpty()`              |
| `List`       | `get()`, `set()`, `add(index, e)`, `indexOf()`                        |
| `Set`        | `add()`, `remove()`, `contains()`                                     |
| `Map`        | `put()`, `get()`, `remove()`, `containsKey()`, `keySet()`, `values()` |
| `Queue`      | `add()`, `offer()`, `poll()`, `peek()`                                |
